import { Aws, Duration, RemovalPolicy, Stack, StackProps, CfnOutput, CustomResource} from 'aws-cdk-lib'
import * as s3 from 'aws-cdk-lib/aws-s3'
import * as s3deploy from 'aws-cdk-lib/aws-s3-deployment'
import * as lambda from 'aws-cdk-lib/aws-lambda'
import { NodejsFunction } from "aws-cdk-lib/aws-lambda-nodejs"
import { LogGroup, RetentionDays } from 'aws-cdk-lib/aws-logs'
import { PolicyStatement, Role, ServicePrincipal, PolicyDocument, ManagedPolicy, CompositePrincipal, ArnPrincipal } from 'aws-cdk-lib/aws-iam'
import { RestApi, LambdaIntegration, Cors, AuthorizationType} from 'aws-cdk-lib/aws-apigateway'
import { Provider } from 'aws-cdk-lib/custom-resources'
import { Construct } from 'constructs'
import * as path from 'path'

interface BedrockSamplesStackProps extends StackProps {
  stage: string
  prefix: string
}


export class BedrockSamplesStack extends Stack {
  constructor(scope: Construct, id: string, props: BedrockSamplesStackProps) {
    super(scope, id, props);

    /**
     * This bucket contains the images generated by /generate-image Api
     */
    const assetsBucket = new s3.Bucket(this, `${props.prefix}-${this.account}-assets-${props.stage}`, {
      bucketName: `${props.prefix}-${this.account}-assets-${props.stage}`,
      cors: [{
        allowedMethods: [s3.HttpMethods.POST],
        allowedOrigins: ["*"],
        allowedHeaders: ["*"]
      }],
      removalPolicy: RemovalPolicy.DESTROY,
      publicReadAccess: false,
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
      autoDeleteObjects: true,
      lifecycleRules: [{
        enabled: true,
        expiration: Duration.days(1)
      }],
    })
    
    new CfnOutput(this, `${props.prefix}-${this.account}-assets-${props.stage}-output`, {
      description: "S3 bucket for AI images.",
      value: `${props.prefix}-${this.account}-assets-${props.stage}`,      
    })

    /**
     * Amazon Bedrock Knowledgebase Source Bucket
     */
    const kbBucket = new s3.Bucket(this, `${props.prefix}-${this.account}-kb-${props.stage}`, {
      bucketName: `${props.prefix}-${this.account}-kb-${props.stage}`,
      cors: [{
        allowedMethods: [s3.HttpMethods.POST],
        allowedOrigins: ["*"],
        allowedHeaders: ["*"]
      }],
      removalPolicy: RemovalPolicy.DESTROY,
      publicReadAccess: false,
      blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
      autoDeleteObjects: true,
    })
    
    new CfnOutput(this, `${props.prefix}-${this.account}-kb-${props.stage}-output`, {
      description: "S3 bucket as Amazon Knowledgebase source.",
      value: `${props.prefix}-${this.account}-assets-${props.stage}`,      
    })

    // Ensure that the data is uploaded as part of the deployment
    new s3deploy.BucketDeployment(this, `${props.prefix}-${this.account}-kb-deployment-${props.stage}`, {
      sources: [s3deploy.Source.asset(path.join(__dirname, '/../kb-data/'))],
      destinationBucket: kbBucket,
      destinationKeyPrefix: 'knowledgeBase'
    })

    const kbCustomResourceRole = new Role(this, `${props.prefix}-${this.account}-kb-custom-role-${props.stage}`, {
      assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
      inlinePolicies: {
        ['bedrockPolicy']: new PolicyDocument({
          statements: [
            new PolicyStatement({
              resources: ['*'],
              actions: [
                'bedrock:*KnowledgeBase',
                'bedrock:*DataSource',
                'iam:PassRole',
              ],
            }),
          ],
        }),
        ['ssmPolicy']: new PolicyDocument({
          statements: [
            new PolicyStatement({
              resources: [
                `arn:aws:ssm:${Stack.of(this).region}:${
                  Stack.of(this).account
                }:parameter/${props.prefix}*`,
              ],
              actions: [
                'ssm:PutParameter',
                'ssm:GetParameter',
                'ssm:DeleteParameter',
              ],
            }),
          ],
        }),
        ['aossPolicy']: new PolicyDocument({
          statements: [
            new PolicyStatement({
              resources: ['*'],
              actions: ['aoss:*', 'iam:CreateServiceLinkedRole'],
            }),
          ],
        }),
      },
      managedPolicies: [
        ManagedPolicy.fromAwsManagedPolicyName(
          'service-role/AWSLambdaBasicExecutionRole',
        ),
      ],
    })

    /**
     * Amazon Bedrock Knowledgebase Role
     */
    const kbRole = new Role(this, `${props.prefix}-${this.account}-kb-role-${props.stage}`, {
      assumedBy: new CompositePrincipal(
        new ServicePrincipal('bedrock.amazonaws.com'),
        new ServicePrincipal('lambda.amazonaws.com'),
        new ArnPrincipal(kbCustomResourceRole.roleArn),
      ),
      inlinePolicies: {
        ['bedrockPolicy']: new PolicyDocument({
          statements: [
            new PolicyStatement({
              resources: [
                'arn:aws:bedrock:us-west-2::foundation-model/amazon.titan-embed-text-v1',
              ],
              actions: ['bedrock:InvokeModel'],
            }),
          ],
        }),
        ['aossPolicy']: new PolicyDocument({
          statements: [
            new PolicyStatement({
              resources: ['*'],
              actions: ['aoss:*'],
            }),
          ],
        }),
      },
    });

    kbBucket.grantReadWrite(kbRole)


    /**
     * CFN Virgin Init 位 Function
     * This 位 function creates necessary resources for a virgin account/region
    */
    const kbCustomResourceFn = new NodejsFunction(this, `${props.prefix}-${this.account}-kb-custom-resource-fn-${props.stage}`, {
      functionName: `${props.prefix}-${this.account}-kb-custom-resource-fn-${props.stage}`,
      runtime: lambda.Runtime.NODEJS_18_X,
      timeout: Duration.seconds(900),
      memorySize: 512,
      handler: 'handler',
      role: kbCustomResourceRole,
      entry: path.join(__dirname, '/../functions/ts/request.ts'),
    });

    const kbProvider = new Provider(this, `${props.prefix}-${this.account}-kb-provider-${props.stage}`, {
      onEventHandler: kbCustomResourceFn,
      logRetention: RetentionDays.ONE_WEEK,
    })

    /**
     * CFN Init
     */
    new CustomResource( this, `${props.prefix}-${this.account}-kb-custom-resource-${props.stage}`, {
      serviceToken: kbProvider.serviceToken,
      properties: {
        knowledgeBaseBucketArn: kbBucket.bucketArn,
        knowledgeBaseRoleArn: kbRole.roleArn,
        knowledgeBaseCustomResourceRole: kbCustomResourceRole.roleArn,
        accessPolicyArns: JSON.stringify([]),
        prefix: props.prefix,
        knowledgeBaseEmbeddingModelArn: 'arn:aws:bedrock:us-west-2::foundation-model/amazon.titan-embed-text-v1',
      }
    })


    /**
     * API GW Defintion
     */
    const restApi = new RestApi(this, `${props.prefix}-bedrock-api-${props.stage}`, {
      restApiName: `${props.prefix}-bedrock-api-${props.stage}`,
      description: 'Sample Bedrock Http Api',
      deployOptions: {
        stageName: props.stage,
      },
      defaultCorsPreflightOptions: {
        allowOrigins: Cors.ALL_ORIGINS,
        allowHeaders: [
          'Content-Type',
          'X-Amz-Date',
          'Authorization',
          'X-Api-Key',
          'X-Amz-Security-Token',
          'X-Auth-Token',
          'Cognito-Refresh-Token',
          'User-Agent',
        ],
        allowMethods: ['OPTIONS', 'GET', 'POST', 'PUT', 'PATCH', 'DELETE'],
        allowCredentials: true
      }
    })

    /**
     * API GW 位 Function
     * This 位 Function is used to ....
     */
    new LogGroup(this, `${props.prefix}-bedrock-request-log-grp-${props.stage}`, {
      logGroupName: `/aws/lambda/${props.prefix}-bedrock-request-${props.stage}`,
      retention: RetentionDays.ONE_YEAR,
      removalPolicy: RemovalPolicy.DESTROY,
    })
    const httpRequestLambdaFn = new lambda.Function(this, `${props.prefix}-bedrock-request-${props.stage}`, {
      functionName: `${props.prefix}-bedrock-request-${props.stage}`,
      runtime: lambda.Runtime.PYTHON_3_10,
      timeout: Duration.seconds(29),
      memorySize: 2048,
      handler: 'main.handler',
      environment: {
        STAGE: props.stage,
        API_URL: `https://${restApi.restApiId!}.execute-api.${Aws.REGION}.amazonaws.com/${props.stage}/`,
        ASSETS_BUCKET: assetsBucket.bucketName,
      },
      code: lambda.Code.fromAsset(path.join(__dirname, '/../functions/py'), {
        bundling: {
          image: lambda.Runtime.PYTHON_3_10.bundlingImage,
          command: [
            'bash',
            '-c',
            'pip install -r requirements.txt -t /asset-output && cp -au . /asset-output',
          ],
        },
      }),
    })
    httpRequestLambdaFn.addToRolePolicy(new PolicyStatement({
      actions: [
        's3:GetObject',
        's3:PutObject',
        's3:HeadObject',
        's3:DeleteObject'
      ],
      resources: [
        `${assetsBucket.bucketArn}/*`,
      ]
    }))
    httpRequestLambdaFn.addToRolePolicy(new PolicyStatement({
      actions: [
        's3:ListBucket'
      ],
      resources: [
        `${assetsBucket.bucketArn}`,
      ]
    }))
    httpRequestLambdaFn.addToRolePolicy(new PolicyStatement({
      actions: [
        'bedrock:Invoke*'
      ],
      resources: ['*']
    }))

    
    /**
     * API GW Methods and Routes
     */
    restApi.root.addMethod('GET', new LambdaIntegration(httpRequestLambdaFn), {
      authorizationType: AuthorizationType.NONE
    })

    /**
     * Sample Foundation Models Endpoints
     * Llama 2 Chat 70B
     * Titan Image Generator G1
     * Cohere
     * Claude 3 Sonnet
     */
    restApi.root.addResource('generate-image').addMethod('POST', new LambdaIntegration(httpRequestLambdaFn))
    restApi.root.addResource('summarize-text').addMethod('POST', new LambdaIntegration(httpRequestLambdaFn))
    restApi.root.addResource('interpret-text').addMethod('POST', new LambdaIntegration(httpRequestLambdaFn))
    restApi.root.addResource('generate-code').addMethod('POST', new LambdaIntegration(httpRequestLambdaFn))

  } // end constructor
}
